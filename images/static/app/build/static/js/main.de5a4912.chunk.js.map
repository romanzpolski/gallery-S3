{"version":3,"sources":["Components/Image.js","Components/Gallery.js","Components/FormComponent.js","Components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","id","fetch","then","response","json","data","setState","views","downloads","catch","err","console","log","state","interval","setInterval","clearInterval","prevProps","react_default","a","createElement","Col","sm","className","name","data-id","onClick","handleClick","src","path","alt","Row","xs","index_es","icon","Component","Gallery","args","_this2","Container","images","map","img","index","Image_Image","assign","key","FormComponent","submitForm","e","preventDefault","fileUpload","handleNameChange","target","value","handleFileChange","file","files","loading","formData","FormData","append","method","body","ok","refresh","msg","image","alertVisible","onDismissAlert","style","fontSize","faCircleNotch","spin","Alert","color","isOpen","toggle","Form","onSubmit","FormGroup","Label","for","Input","onChange","type","placeholder","Button","Pagination","getPages","pages","i","push","page","active","paginationClick","total","Math","ceil","React","library","add","faEye","faDownload","App","imgId","dataset","viewImage","toggleModal","modal","getImages","arguments","length","undefined","config","apiHost","downloadImage","modalImage","window","location","imageId","FormComponent_FormComponent","Gallery_Gallery","Pagination_Pagination","Modal","ModalHeader","ModalBody","imagePath","ModalFooter","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de5a4912.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col, Media } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nexport default class Image extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            views: this.props.views,\n            downloads: this.props.downloads\n        }\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            //this.getData(this.props.id);\n        }, 10000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props.id !== prevProps.id){\n            this.setState({\n                views: this.props.views,\n                downloads: this.props.downloads\n            });\n            this.getData(this.props.id)\n        }\n    }\n\n    getData = (id) => {\n        fetch('http://localhost/api/image/getData/'+id).then(response => {\n            return response.json();\n        }).then(data => {\n            this.setState({\n                views: data.data.views,\n                downloads: data.data.downloads\n            });\n        }).catch(err => {\n            console.log('Fetch get image data failed', err);\n        });\n    };\n\n    render(){\n        return(\n            <Col sm=\"4\">\n                <br />\n                <h6 className={'text-center'}>{this.props.name}</h6>\n                <img data-id={this.props.id} onClick={this.props.handleClick} className={'img-fluid'} src={this.props.path} alt={this.props.name} />\n                <Row>\n                    <Col xs=\"3\"><FontAwesomeIcon icon=\"eye\" /></Col>\n                    <Col xs=\"9\" className={'text-right'}>{this.state.views}</Col>\n                </Row>\n                <Row>\n                    <Col xs=\"3\"><FontAwesomeIcon icon=\"download\" /></Col>\n                    <Col xs=\"9\" className={'text-right'}><span>{this.state.downloads}</span></Col>\n                </Row>\n            </Col>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Modal, Button, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\nimport Image from './Image.js';\n\nexport default class Gallery extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    handleClick = (args) => {\n        this.props.handleClick(args);\n    };\n\n    render(){\n        return(\n            <Container>\n                <Row>\n                {this.props.images.map((img, index) => {\n                    return(\n                        <Image key={index} {...img} handleClick={this.props.handleClick} />\n                    )\n                })}\n                </Row>\n            </Container>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Media, Button, Form, FormGroup, Label, Input, FormText, Alert } from 'reactstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons'\n\nexport default class FormComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            file: {},\n            loading: false,\n            alertVisible:false\n        }\n    };\n\n    submitForm = (e) => {\n        e.preventDefault()\n        this.fileUpload()\n    };\n\n    handleNameChange = (e) => {\n        this.state.name = e.target.value;\n    };\n\n    handleFileChange = (e) => {\n        this.state.file = e.target.files[0];\n    };\n\n    fileUpload = () => {\n        this.setState({\n            loading: true\n        });\n        const url = 'http://localhost/api/image/upload';\n        const formData = new FormData();\n        formData.append('image', this.state.file );\n        formData.append('name', this.state.name );\n        const config = {\n            method: 'POST',\n            body: formData\n        };\n        fetch(url, config).then(response => {\n            if(response.ok) {\n                this.props.refresh();\n            }\n            return response.json();\n        }).then(data => {\n            this.setState({\n                loading: false,\n                msg: data.image,\n                alertVisible:true\n            })\n        }).catch(err => {\n            console.log('Fetch Error', err);\n        });\n\n    };\n\n    onDismissAlert = () => {\n        this.setState({ alertVisible: false });\n    }\n\n    render(){\n\n        const style = {\n            \"fontSize\":\"80px\"\n        }\n\n\n        return(\n            <Container>\n                {this.state.loading ? (\n                    <div className={\"text-center\"} style={style}>\n                        <FontAwesomeIcon icon={faCircleNotch} spin />\n                    </div>\n                ) : (\n                    <div>\n                    <Alert color=\"info\" isOpen={this.state.alertVisible} toggle={this.onDismissAlert}>\n                        {this.state.msg}\n                    </Alert>\n                    <Form className={'upload-form'} onSubmit={ this.submitForm }>\n                        <FormGroup>\n                        <Label for={\"name\"}>Name</Label>\n                        <Input onChange={this.handleNameChange} type={\"text\"} name={\"name\"} id={\"name\"} placeholder={\"Name\"} />\n                        </FormGroup>\n                        <FormGroup>\n                        <Label for={\"image\"}>File</Label>\n                        <Input onChange={this.handleFileChange} type={\"file\"} name={\"image\"} id={\"image\"} />\n                        </FormGroup>\n                        <Button className={'success'} >Upload</Button>\n                        <br/><br/>\n                    </Form>\n                    </div>\n                )}\n            </Container>\n    );\n    }\n}\n","import React from 'react';\nimport { Button, Row, Container } from 'reactstrap';\n\nexport default class Pagination extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            page: this.props.page,\n            total: this.props.total,\n            pages: Math.ceil(this.props.total / 9)\n        }\n    };\n\n    componentDidUpdate(prevProps) {\n        if(this.props !== prevProps){\n            this.setState({\n                page: this.props.page,\n                total: this.props.total,\n                pages: Math.ceil(this.props.total / 9)\n            });\n        }\n    }\n\n    getPages = () => {\n        let pages = [];\n        for(let i=1; i <= this.state.pages;  i++){\n            pages.push(i)\n        }\n        let markup = pages.map( page => {\n            if ((page -1) == this.state.page){\n                return (<Button active color={\"success\"} onClick={()=>this.props.paginationClick(page-1)} key={page}> {page} </Button>)\n            } else {\n                return (<Button color={\"success\"} onClick={()=>this.props.paginationClick(page-1)} key={page}> {page} </Button>)\n            }\n        })\n\n        return markup;\n    };\n\n    render() {\n        // console.log(this.state.pages);\n        //const pages = this.getPages();\n\n        return (\n            <Container className={\"text-right\"}>\n                <br/><br/>\n                {this.getPages()}\n                <br/><br/>\n            </Container>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Gallery from './Components/Gallery.js';\nimport FormComponent from './Components/FormComponent.js';\nimport Pagination from './Components/Pagination.js';\nimport { Row, Col, Modal, Button, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDownload } from '@fortawesome/free-solid-svg-icons'\nimport { faEye } from '@fortawesome/free-solid-svg-icons'\nimport config from './config.json'\n\nlibrary.add(faEye);\nlibrary.add(faDownload);\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            images: [],\n            modal: false,\n            page: 0,\n            total: 0,\n            imageId: false,\n            modalImage: ''\n        };\n    }\n\n    componentWillMount(){\n        this.getImages(0)\n    }\n\n    handleClick = (e) => {\n        let imgId = e.target.dataset.id\n        this.viewImage(imgId)\n    }\n\n    toggleModal = () => {\n        this.setState({\n            modal: !this.state.modal\n        })\n    }\n\n    getImages = (page=0) => {\n        fetch(config.apiHost+'/api/images/'+page).then(response => {\n            return response.json()\n        }).then(data => {\n            this.setState({\n                images: data.data,\n                total: data.total\n            })\n        }).catch(err => {\n            console.log('Fetch Images Error', err)\n        })\n    }\n\n    downloadImage = () => {\n        fetch(config.apiHost+'/api/image/download/'+this.state.modalImage.id).then(response => {\n            return response.json()\n        }).then(data => {\n            window.location = data.data\n            this.toggleModal()\n        }).catch(err => {\n            console.log('Fetch Download Image Error', err)\n        })\n    }\n\n    viewImage = (id) => {\n        fetch(config.apiHost+'/api/image/view/'+id).then(response => {\n            return response.json()\n        }).then(data => {\n            this.setState({\n                modalImage:data.data,\n            })\n            this.toggleModal()\n        }).catch(err => {\n            console.log('Fetch View Image Error', err)\n        })\n    }\n\n    refresh = () => {\n        this.getImages(this.state.page)\n    }\n\n    paginationClick = (page) => {\n        this.state.page = page\n        this.refresh()\n    }\n\n    render() {\n\n        return (\n            [\n                <FormComponent refresh={this.refresh} />,\n                <Gallery images={this.state.images} handleClick={this.handleClick} />,\n                <Pagination page={this.state.page} paginationClick={this.paginationClick} total={this.state.total}/>,\n                <Modal isOpen={this.state.modal} toggle={this.toggleModal} className={\"lg\"}>\n                    <ModalHeader toggle={this.toggle}>{this.state.modalImage.name}</ModalHeader>\n                    <ModalBody>\n                        <img className={'img-fluid'} src={this.state.modalImage.imagePath} />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"primary\" onClick={this.downloadImage}>Download Image</Button>\n                        <Button color=\"secondary\" onClick={this.toggleModal}>Cancel</Button>\n                    </ModalFooter>\n                </Modal>\n            ]\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}